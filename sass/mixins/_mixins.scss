/* Mixins
--------------------------------------------------------------
-------------------------------------------------------------- */
 
/* REM mixins and functions
-------------------------------------------------------------- */
/* 
 * calc-rem: calculate the rem value based on the desired pixel
 * value versus a context value
 */
@function calc-rem( $target, $context) {
  @return $target / $context * 1rem;
}
 
/*
 * a small mixin for easy use of rem with px as fallback.
 * $base-font is optional and allows you to provide context
 * when using breakpoints and media queries. $base-font should
 * be consistent with the html font size set in _base.scss
 * usage: @include x-rem(font-size, 14px, 16px)
 * usage: @include x-rem(marign, 0 12px 2 1.2, 18px)
 * usage: @include x-rem(padding, 1.5 24px)
 */
@mixin x-rem($property, $values, $base-font: $base-font-size) {
  $base-font-size: $base-font;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  @if $px-values == $rem-values {
    #{$property}: $px-values;
  } @else {
    #{$property}: $px-values;
    #{$property}: $rem-values;
  }
}


/* media queries & breakpoints
-------------------------------------------------------------- */
@mixin screen($viewport-min, $viewport-max) {
  @media screen and ( min-width: $viewport-min ) and ( max-width: $viewport-max ) {
    @content;
  }
}

@mixin max-screen($viewport) {
  @media screen and ( max-width: $viewport ) {
    @content;
  }
}

@mixin min-screen($viewport) {
  @media screen and ( min-width: $viewport ) {
    @content;
  }
}

// breakpoints 
@mixin respond-to($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($breakpoints, $breakpoint);  // $breakpoints map found in _variables.scss

  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (min-width: $value) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

/* hdpi (retina) images
-------------------------------------------------------------- */
// resolution : https://github.com/pierreburel/sass-resolution
$resolution-default: 2 !default;
$resolution-presets: (
  "ldpi" 75%,
  "mdpi" 100%,
  "hdpi" 150%,
  "xhdpi" 200%,
  "xxhdpi" 300%,
  "xxxhdpi" 400%,
  "retina" 2,
  "@2x" 2,
  "@3x" 3
) !default;

@function resolution-preset($resolution) {
  @if type-of($resolution) == "string" {
    @each $preset in $resolution-presets {
      @if nth($preset, 1) == $resolution {
        @return nth($preset, 2)
      }
    }
  }
  @return $resolution;
}

@mixin resolution($resolution: $resolution-default) {
  $resolution: resolution-preset($resolution);
  @if type-of($resolution) == "number" {
    @if unit($resolution) == "dpi" {
      $resolution: $resolution / 96dpi;
    } @else if unit($resolution) == "%" {
      $resolution: $resolution / 100%;
    } @else {
      $resolution: $resolution / ($resolution * 0 + 1)
    }
    @media (-webkit-min-device-pixel-ratio: #{$resolution}), (min-resolution: #{$resolution * 96dpi}) {
      @content;
    }
  } @else {
    @error "#{$resolution} is not a valid resolution or preset";
  }
}

